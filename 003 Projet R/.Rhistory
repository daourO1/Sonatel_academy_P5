}
date_naissance = str_replace_all(date_naissance,c('fev'='02',"mars"="3","decembre"="12" ))
# date_naissance
# Vérifier si la date est au format jour/mois/année
# Vérifier si la date est valide
date_valide = tryCatch(as.Date(date_naissance, format = "%d/%m/%y"), error = function(e) NA)
# Vérifier si la date est valide ou non
ifelse(is.na(date_valide), FALSE, TRUE)# date=gsup(" ","/",date_naissance)
}
}
date_naissance_etudiant('          31;02|04   ')
# Verification date de naissance
date_naissance_etudiant = function(date_naissance){
if (is.na(date_naissance)){
return (F)
}else{
# Supprime les espaces unitiles
date_naissance=trimws(date_naissance)
char = str_detect(date_naissance,'(-)*(,)*(_)*(\\|)*(:)*(\\.)*(;)')
# Remplacer les caractéres par /
if (char==T){
library(stringr)
date_naissance=str_replace_all(date_naissance, c("-"="/", ","="/", "_"="/", "\\|"="/", ":"="/", "\\."="/", ";"="/"))
}
date_naissance = str_replace_all(date_naissance,c('fev'='02',"mars"="3","decembre"="12" ))
# date_naissance
# Vérifier si la date est au format jour/mois/année
# Vérifier si la date est valide
date_valide = tryCatch(as.Date(date_naissance, format = "%d/%m/%y"), error = function(e) NA)
# Vérifier si la date est valide ou non
ifelse(is.na(date_valide), FALSE, TRUE)# date=gsup(" ","/",date_naissance)
}
}
date_naissance_etudiant('07-06-199Ç')
# Verification de classe
classe_etudiant = function(classe) {
tryCatch({
if (is.na(classe) || classe == "") {
return(FALSE)
} else {
# Supprime les espaces et les caractères
classe1 <- gsub("[[:space:]|,;.-]+", "", classe)
if (grepl("^[3-6][[:alpha:]]*$", classe1)) {
# Si la classe commence par 3, 4, 5 ou 6 suivis d'une lettre, alors c'est une classe de collège
if (substr(classe1, nchar(classe1), nchar(classe1)) %in% c("A", "B")) {
return(TRUE)
} else {
return(FALSE)
}
} else {
# Sinon, ce n'est pas une classe valide
return(FALSE)
}
}
}, error = function(e) {
return(FALSE)
})
}
classe_etudiant('4em B')
# Verification de classe
classe_etudiant = function(classe) {
tryCatch({
if (is.na(classe) || classe == "") {
return(FALSE)
} else {
# Supprime les espaces et les caractères
classe1 <- gsub("[[:space:]|,;.-]+", "", classe)
if (grepl("^[3-6][[:alpha:]]*$", classe1)) {
# Si la classe commence par 3, 4, 5 ou 6 suivis d'une lettre, alors c'est une classe de collège
if (substr(classe1, nchar(classe1), nchar(classe1)) %in% c("A", "B")) {
return(TRUE)
} else {
return(FALSE)
}
} else {
# Sinon, ce n'est pas une classe valide
return(FALSE)
}
}
}, error = function(e) {
return(FALSE)
})
}
classe_etudiant('5e A')
# Verification de classe
classe_etudiant = function(classe) {
tryCatch({
if (is.na(classe) || classe == "") {
return(FALSE)
} else {
# Supprime les espaces et les caractères
classe1 <- gsub("[[:space:]|,;.-]+", "", classe)
if (grepl("^[3-6][[:alpha:]]*$", classe1)) {
# Si la classe commence par 3, 4, 5 ou 6 suivis d'une lettre, alors c'est une classe de collège
if (substr(classe1, nchar(classe1), nchar(classe1)) %in% c("A", "B")) {
return(TRUE)
} else {
return(FALSE)
}
} else {
# Sinon, ce n'est pas une classe valide
return(FALSE)
}
}
}, error = function(e) {
return(FALSE)
})
}
classe_etudiant('6 eme C')
# Verification de classe
classe_etudiant = function(classe) {
tryCatch({
if (is.na(classe) || classe == "") {
return(FALSE)
} else {
# Supprime les espaces et les caractères
classe1 <- gsub("[[:space:]|,;.-]+", "", classe)
if (grepl("^[3-6][[:alpha:]]*$", classe1)) {
# Si la classe commence par 3, 4, 5 ou 6 suivis d'une lettre, alors c'est une classe de collège
if (substr(classe1, nchar(classe1), nchar(classe1)) %in% c("A", "B")) {
return(TRUE)
} else {
return(FALSE)
}
} else {
# Sinon, ce n'est pas une classe valide
return(FALSE)
}
}
}, error = function(e) {
return(FALSE)
})
}
classe_etudiant('Tlel'1')
# Verification de classe
classe_etudiant = function(classe) {
tryCatch({
if (is.na(classe) || classe == "") {
return(FALSE)
} else {
# Supprime les espaces et les caractères
classe1 <- gsub("[[:space:]|,;.-]+", "", classe)
if (grepl("^[3-6][[:alpha:]]*$", classe1)) {
# Si la classe commence par 3, 4, 5 ou 6 suivis d'une lettre, alors c'est une classe de collège
if (substr(classe1, nchar(classe1), nchar(classe1)) %in% c("A", "B")) {
return(TRUE)
} else {
return(FALSE)
}
} else {
# Sinon, ce n'est pas une classe valide
return(FALSE)
}
}
}, error = function(e) {
return(FALSE)
})
}
classe_etudiant("Tlel'1")
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note.split("#")
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=strsplit(note,"#")
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=strsplit(note,"#")
note=gsub("]","",note)
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
# note=strsplit(note,"#")
note=gsub("]","",note)
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
note=strsplit(note,"#")
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note=strsplit(note,"[")
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
note=strsplit(note,"#")
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note=strsplit(note,"[")
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
# note=strsplit(note,"[")
note
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note=strsplit(c(note,"["))
note
# sapply(note, strsplit(""))
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note=strsplit(c(note),"[")
note
# sapply(note, strsplit(""))
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note=strsplit(c(note),"[")
note
# sapply(note, strsplit(""))
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note=strsplit(fixed(note),"[")
note
# sapply(note, strsplit(""))
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
note=strsplit(fixed(note),"[")
for (matiere in note){
matiere = strsplit(matiere,"[")
matiere
}
# sapply(note, strsplit(""))
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"[")
matiere
}
# sapply(note, strsplit(""))
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"[")
matiere
}
# sapply(note, strsplit(""))
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"[")
matiere
}
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"\\[")
matiere
}
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"\\[")
# matiere
}
print(matiere)
}
}
note_etudiant('Français[09|17:16]#Anglais[10|13:09]#SVT[13|12:14]#HG[13|15:07]#Science_Physique[12|12:14]#Math[11|07:18]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"\\[")
# matiere
}
print(matiere)
}
}
note_etudiant('Math[10|11:15] #Francais[7|12|8:13] #Anglais[13,5|9:15] #PC[11:9]  #SVT[12|9|16|11:12]  #HG[10:13]')
donnee = read.csv("Donnees_Projet_Python_DataC5.csv",sep=",",dec=",")
donnee
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"\\[")
# matiere
}
print(matiere)
}
}
note_etudiant('Math[10|11:15] #Francais[7|12|8:13] #Anglais[13,5|9:15] #PC[11:9]  #SVT[12|9|16|11:12]  #HG[10:13]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"\\[")
if(length(matiere)==2 & grepl("[[:alpha:]]*$",matiere[1])){
return(T)
}
}
print(matiere)
}
}
note_etudiant('Math[10|11:15] #Francais[7|12|8:13] #Anglais[13,5|9:15] #PC[11:9]  #SVT[12|9|16|11:12]  #HG[10:13]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"\\[")
if(length(matiere)==2 & grepl("[[:alpha:]]*$",matiere[1])){
return(T)
}
}
# print(matiere)
}
}
note_etudiant('Math[10|11:15] #Francais[7|12|8:13] #Anglais[13,5|9:15] #PC[11:9]  #SVT[12|9|16|11:12]  #HG[10:13]')
# Verification de note
note_etudiant = function(note){
if (is.na(note) || note==""){
return (F)
}else{
note=trimws(note)
note=gsub("]","",note)
note=strsplit(note,"#")
for (matiere in note){
matiere = strsplit(matiere,"\\[")
if(length(matiere)==2 & grepl("[[:alpha:]]*$",matiere[1])){
notes=strsplit(matiere[2],":")
print(notes)
}else{
return (F)
}
}
# print(matiere)
}
}
note_etudiant('Math[10|11:15] #Francais[7|12|8:13] #Anglais[13,5|9:15] #PC[11:9]  #SVT[12|9|16|11:12]  #HG[10:13]')
